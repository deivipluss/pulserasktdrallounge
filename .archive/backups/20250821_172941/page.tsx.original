'use client';

import { Suspense, useState, useEffect } from 'react';
import { useSearchParams } from 'next/navigation';
import { motion } from 'framer-motion';
import Roulette, { type Reward } from '@/app/components/Roulette';
import { hasIdPlayed, markIdAsPlayed } from '@/app/lib/played-storage';
import { getEventTZ, getTimeUntilEvent } from '@/app/lib/client-env';

// Estados posibles de la página
enum PageState {
  LOADING,
  WAITING,
  READY_TO_PLAY,
  PLAYED,
  ERROR
}

export default function PlayWrapper() {
  return (
    <Suspense fallback={<div>Cargando juego...</div>}>
      <Play />
    </Suspense>
  );
}

function Play() {
  const searchParams = useSearchParams();
  const id = searchParams?.get('id') || '';
  
  const [state, setState] = useState<PageState>(PageState.LOADING);
  const [timeLeft, setTimeLeft] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0, hasStarted: false });
  const [reward, setReward] = useState<Reward | null>(null);
  const [predefinedPrize, setPredefinedPrize] = useState<string | null>(null);
  
  // Efecto para forzar el premio predefinido cuando esté disponible
  useEffect(() => {
    if (predefinedPrize && state === PageState.READY_TO_PLAY && typeof window !== 'undefined') {
      // Esperar a que la interfaz esté completamente cargada antes de intentar forzar el premio
      const timer = setTimeout(() => {
        try {
          console.log('[DEBUG] Intentando forzar premio:', predefinedPrize);
          
          // Verificar que el premio esté en el formato correcto
          const normalizePrize = (prize: string) => {
            if (!prize) return '';
            
            const lowercase = prize.toLowerCase().trim();
            
            // Mapeo específico para casos especiales
            const specialCases: Record<string, string> = {
              'popcorn': 'popcorn',
              'pop-corn': 'popcorn',
              'pop corn': 'popcorn',
              'nuevointento': 'un nuevo intento',
              'nuevo intento': 'un nuevo intento',
              'nuevo-intento': 'un nuevo intento',
              'retry': 'un nuevo intento'
            };
            
            // Devolver el caso especial o el nombre original normalizado
            return specialCases[lowercase] || lowercase;
          };
          
          const normalizedPrize = normalizePrize(predefinedPrize);
          console.log('[DEBUG] Premio original:', predefinedPrize);
          console.log('[DEBUG] Premio normalizado:', normalizedPrize);
          
          if (typeof window.__rouletteForceByName === 'function') {
            // Forzar el premio sin activar automáticamente la ruleta
            const success = window.__rouletteForceByName(normalizedPrize);
            console.log(`[DEBUG] Premio "${normalizedPrize}" forzado: ${success ? 'exitoso' : 'fallido'}`);
          } else {
            console.warn('[DEBUG] Función window.__rouletteForceByName no disponible todavía.');
          }
        } catch (err) {
          console.error('Error al forzar premio:', err);
        }
      }, 1500); // Aumentado a 1.5 segundos para dar tiempo a la interfaz de cargarse completamente
      
      return () => clearTimeout(timer);
    }
  }, [predefinedPrize, state]);
  
  // Función para cargar el premio predeterminado desde el CSV
  const loadPredefinedPrize = async (tokenId: string) => {
    try {
      // Extraemos la fecha del tokenId (formato: ktd-YYYY-MM-DD-NNN)
      const dateMatch = tokenId.match(/ktd-(\d{4}-\d{2}-\d{2})-\d+/);
      if (!dateMatch || !dateMatch[1]) {
        console.error('Formato de ID de token inválido:', tokenId);
        return null;
      }
      
      const date = dateMatch[1];
      const csvPath = `/tokens/${date}.csv`;
      
      // Intentar cargar el archivo CSV
      const response = await fetch(csvPath);
      if (!response.ok) {
        console.error('No se pudo cargar el archivo CSV:', csvPath);
        return null;
      }
      
      const csvText = await response.text();
      const lines = csvText.split('\n');
      
      // Buscar la línea que corresponde al ID del token
      for (const line of lines) {
        if (line.startsWith(tokenId)) {
          const fields = line.split(',');
          if (fields.length >= 3) {
            return fields[2]; // El campo prize está en la posición 2
          }
        }
      }
      
      console.error('Token no encontrado en el CSV:', tokenId);
      return null;
    } catch (error) {
      console.error('Error al cargar premio predefinido:', error);
      return null;
    }
  };
  
  // Verificar el estado al cargar
  useEffect(() => {
    const checkState = async () => {
      if (!id) {
        setState(PageState.ERROR);
        return;
      }
      
      try {
        // 1. Cargar el premio predefinido para este token
        const prize = await loadPredefinedPrize(id);
        setPredefinedPrize(prize);
        console.log(`[DEBUG] Premio predefinido para ${id}: ${prize}`);
        
        // 2. Verificar si ya jugó
        if (hasIdPlayed(id)) {
          setState(PageState.PLAYED);
          return;
        }
        
        // 3. Obtener tiempo del servidor
        const response = await fetch('/api/event-time');
        if (!response.ok) throw new Error('Error al obtener la hora del evento');
        
        const data = await response.json();
        setTimeLeft(data.timeUntilEvent);
        
        // 4. Verificar si el evento ha comenzado
        if (data.timeUntilEvent.hasStarted) {
          setState(PageState.READY_TO_PLAY);
        } else {
          setState(PageState.WAITING);
          
          // Actualizar el contador
          const interval = setInterval(() => {
            const timeUntil = getTimeUntilEvent();
            setTimeLeft(timeUntil);
            
            if (timeUntil.hasStarted) {
              setState(PageState.READY_TO_PLAY);
              clearInterval(interval);
            }
          }, 1000);
          
          return () => clearInterval(interval);
        }
      } catch (error) {
        console.error('Error:', error);
        setState(PageState.ERROR);
      }
    };
    
    checkState();
  }, [id]);
  
  // Manejar el resultado de la ruleta
  const handleRouletteResult = (result: Reward) => {
    // Registrar el resultado para depuración
    console.log('[DEBUG] Resultado de la ruleta:', result);
    console.log('[DEBUG] Nombre del premio ganado:', result.name);
    console.log('[DEBUG] Color del premio:', result.color);
    console.log('[DEBUG] Premio predefinido:', predefinedPrize);
    
    // Validación adicional para confirmar que el premio es correcto
    if (predefinedPrize) {
      const normalizedPredefined = predefinedPrize.toLowerCase().trim();
      const normalizedResult = result.name.toLowerCase().trim();
      
      if (!normalizedResult.includes(normalizedPredefined) && 
          !normalizedPredefined.includes(normalizedResult)) {
        console.warn('[DEBUG] ¡ADVERTENCIA! El premio ganado no coincide con el predefinido:');
        console.warn(`  Predefinido: ${predefinedPrize}`);
        console.warn(`  Resultado: ${result.name}`);
      } else {
        console.log('[DEBUG] Premio ganado coincide con el predefinido ✓');
      }
    }
    
    setReward(result);
    markIdAsPlayed(id);
    setState(PageState.PLAYED);
  };
  
  // Renderizado basado en el estado
  const renderContent = () => {
    switch (state) {
      case PageState.LOADING:
        return (
          <div className="text-center py-10">
            <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-amber-500"></div>
            <p className="mt-4 text-lg">Cargando...</p>
          </div>
        );
        
      case PageState.WAITING:
        return (
          <div className="text-center py-10">
            <h2 className="text-2xl font-bold mb-6">¡El evento aún no ha comenzado!</h2>
            <div className="grid grid-cols-4 gap-3 max-w-md mx-auto">
              <div className="bg-amber-100/20 rounded p-3 border border-amber-200/30">
                <div className="text-2xl font-bold">{timeLeft.days}</div>
                <div className="text-xs uppercase tracking-wider opacity-80">Días</div>
              </div>
              <div className="bg-amber-100/20 rounded p-3 border border-amber-200/30">
                <div className="text-2xl font-bold">{timeLeft.hours}</div>
                <div className="text-xs uppercase tracking-wider opacity-80">Horas</div>
              </div>
              <div className="bg-amber-100/20 rounded p-3 border border-amber-200/30">
                <div className="text-2xl font-bold">{timeLeft.minutes}</div>
                <div className="text-xs uppercase tracking-wider opacity-80">Minutos</div>
              </div>
              <div className="bg-amber-100/20 rounded p-3 border border-amber-200/30">
                <div className="text-2xl font-bold">{timeLeft.seconds}</div>
                <div className="text-xs uppercase tracking-wider opacity-80">Segundos</div>
              </div>
            </div>
            <p className="mt-6 text-amber-100/70">{`Hora local del evento: ${getEventTZ()}`}</p>
          </div>
        );
        
      case PageState.READY_TO_PLAY:
        return (
          <div className="flex flex-col items-center justify-center py-6">
            <h2 className="text-2xl font-bold mb-6">¡Gira la ruleta y gana!</h2>
            <Roulette onResult={handleRouletteResult} />
          </div>
        );
        
      case PageState.PLAYED:
        return (
          <div className="text-center py-10">
            <h2 className="text-2xl font-bold mb-3">¡Gracias por participar!</h2>
            {reward ? (
              <div className="mt-6 py-4 px-5 rounded-lg bg-gradient-to-r from-amber-50 to-amber-100 
                     dark:from-amber-900/50 dark:to-amber-800/50
                     border border-amber-200 dark:border-amber-700
                     shadow-lg text-center max-w-md mx-auto">
                <div className="text-sm opacity-70 mb-1">Tu premio es:</div>
                <div 
                  className="text-2xl font-bold" 
                  style={{ 
                    color: reward.color, 
                    textShadow: '0 1px 2px rgba(0,0,0,0.2)',
                    padding: '8px',
                    margin: '4px 0',
                    borderRadius: '4px',
                    backgroundColor: `${reward.color}20`
                  }}
                >
                  {reward.emoji ? `${reward.emoji} ${reward.name}` : reward.name}
                </div>
                <div className="text-sm mt-3 opacity-80">
                  {reward.retry ? 'Puedes intentarlo nuevamente con otro código' : 'Muestra esta pantalla a un organizador para reclamar tu premio'}
                </div>
              </div>
            ) : (
              <p>¡Has participado en este evento!</p>
            )}
            <div className="mt-8 text-sm opacity-70">
              <p>Tu token ya ha sido utilizado.</p>
            </div>
          </div>
        );
        
      case PageState.ERROR:
        return (
          <div className="text-center py-10">
            <div className="rounded-full bg-amber-100/10 p-3 w-16 h-16 mx-auto mb-4 flex items-center justify-center">
              <svg className="w-8 h-8 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <h2 className="text-xl font-semibold mb-2">¡Ups! Algo salió mal</h2>
            <p className="opacity-80 max-w-md mx-auto">
              No se pudo verificar tu token o hubo un problema al cargar el juego.
              Asegúrate de usar el enlace correcto o contacta a un organizador.
            </p>
          </div>
        );
    }
  };
  
  return (
    <main className="min-h-screen bg-gray-900 text-white py-6">
      <div className="container mx-auto px-4">
        <header className="text-center mb-8">
          <h1 className="text-3xl font-bold text-amber-400">KTD Lounge</h1>
          <p className="text-amber-100/80">Ruleta de Premios</p>
        </header>
        
        {renderContent()}
      </div>
    </main>
  );
}
